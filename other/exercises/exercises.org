Just some programming exercises.
* EPI
** Stacks & Queues (8)
4, 8, 14

*** Path Cleaning (8)
Clean up a path name, dealing with ., .., and // in path names.
#+BEGIN_SRC python
  from collections import deque

  def clean_path(pathname):
      stack = deque()
      word = ""
      for char in pathname:
          if char == "/":
              if word == "." or word == "":
                  pass
              elif word == "..":
                  stack.pop()
              else:
                  stack.append(word)
              word = ""
          else:
              word = word + char
      if word:
          stack.append(word)
      return "/".join(stack)

  # return clean_path("scripts//./../scripts/awkscripts/././")
  return clean_path("/usr/lib/../bin/gcc")


#+END_SRC

#+RESULTS:
: usr/bin/gcc

*** Queue from Two Stacks (12)
#+BEGIN_SRC python :results output :tangle yes
  from collections import deque

  class stack2q(object):

      def __init__(self, vals=[]):
          self.stack1 = deque()
          self.stack2 = deque()
          for k in vals:
              self.enq(k)

      def enq(self, value):
          while self.stack1:
              self.stack2.append(self.stack1.pop())
          self.stack1.append(value)
          while self.stack2:
              self.stack1.append(self.stack2.pop())

      def deq(self):
          return self.stack1.pop()

  test = stack2q([1, 2, 3, 4])
  print(test.deq())
  print(test.deq())
  print(test.deq())
#+END_SRC

#+RESULTS:
: 1
: 2
: 3

*** Queue with Max (13)

#+BEGIN_SRC python
  from collections import deque


  class maxq(object):
      def __init__(self, inval=[]):
          self.valq = deque()
          self.maxq = deque()
          for k in inval:
              self.enqueue(k)

      def enqueue(self, value):
          self.valq.append(value)
          if self.maxq:
              self.maxq.append(max(value, self.maxq[-1]))
          else:
              self.maxq.append(value)

      def dequeue(self):
          self.maxq.pop()
          return self.valq.pop()

      def get_max(self):
          return self.maxq[-1]

  test = maxq([1, 2, 3])
#+END_SRC

#+RESULTS:
: None

*** Maximum of a Sliding Window (14)
#+BEGIN_SRC python
  from collections import deque

  def window_max(data, window_size):
      """Find maximum of sliding window, assume data is list of 2-ples"""
      actual_size = 0
      max_sum = 0
      current_sum = 0
      queue = deque()

      for k in data:
          if actual_size < window_size:
              queue.append(k)
              actual_size += 1
              current_sum += k[1]
              if current_sum > max_sum:
                  max_sum = current_sum
              continue
          queue.append(k)
          current_sum = current_sum + k[1] - queue.popleft()[1]
          if current_sum > max_sum:
              max_sum = current_sum
      return max_sum

  data = zip([1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 5, 2, 6, 8, 3, 1, 1, 2])
      
  return window_max(data, 3)
#+END_SRC

#+RESULTS:
: 17

** Binary Tree (9)
*** Check Balance (1)
#+BEGIN_SRC python
  class Tree:


      def __init__(self):
          self.root = []

      def get_child(self, index):
          return self.root[index]

      def follow_path(self, path):
          temp = self.root
          for k in path:
              temp = temp[k]
          return temp

      def is_balanced(self):
          def helper(self, node):
              if not node:
                  return 0
              else:
                  themin, themax = 0, 0
                  for k in node:
                      
                  return min()
              
          for k in self.root:
              
      

#+END_SRC
* Trees
** Building tree from inorder and postorder.
Assignment: 
*** tree 1
       a
    b     c
  d   e    f
   g      h    
+ inorder:  dgbeachf
+ postorder: gdebhfca
*** tree 2
    f
  h
+ inorder:  hf
+ postorder: hf

*** tree 3
b
  e
+ inorder: be
+ postorder: eb

*** tree 4
g
+ inorder: g
+ postorder: g
*** solution
#+BEGIN_SRC python
  inorder = ['d', 'g', 'b', 'e', 'a', 'c', 'h', 'f']
  postorder  = ['g', 'd', 'e', 'b', 'h', 'f', 'c', 'a']
  def build_tree(ino, posto):
      if len(ino) == 0:
          return None
      elif len(ino) == 1:
          return (ino, None, None)
      curnode = posto[-1]
      in_index = ino.index(curnode)
      leftin = ino[0:in_index]
      rightin = ino[in_index+1:]
      leftpost = posto[0:in_index]
      rightpost = posto[in_index:-1]
      left = build_tree(leftin, leftpost)
      right = build_tree(rightin, rightpost)
      return (curnode, left, right)
  return build_tree(inorder, postorder)        
#+END_SRC

#+RESULTS:
| a | (b (d None ((g) None None)) ((e) None None)) | (c None (f ((h) None None) None)) |

 
** Lowest common ancestor
*** Generic tree, multiple common values
Tries to find the closest common ancestor in a tree between a list of values. Little error-checking is done.
   a
  b  c
    d  e

#+BEGIN_SRC python
  #!/usr/bin/env python

  tree = ('a', ('b', None, None), ('c', ('d', None, None), ('e', None, None)))

  ## First call the helper, then use that dictionary to find lowest common member of the lists.
  def lowest_common_ancestor(vals, head):
      ancestor_paths = lowest_common_ancestor_helper(vals, head, [], {})
      print ancestor_paths
      bestans = head[0]
      for k in ancestor_paths[vals[0]]:
          for q in ancestor_paths:
              if k not in ancestor_paths[q]:
                  return bestans
          bestans = k
      return bestans
          
  ## Return a dictionary mapping each value we're looking at to a list repersenting its path.
  def lowest_common_ancestor_helper(vals, head, path, ans):
      for k in vals:
          if k == head[0]:
              ans[k] = path    
      if head[1] != None:
          x = list(path)
          x.append(head[0])
          lowest_common_ancestor_helper(vals, head[1], x, ans)
      if head[2] != None:
          x = list(path)
          x.append(head[0])        
          lowest_common_ancestor_helper(vals, head[2], x, ans)
      return ans

  return lowest_common_ancestor(['d', 'e'], tree)

#+END_SRC

#+RESULTS:
: c

*** BST, two common values
Assumes tree is a BST, only takes two values.
    5
   3  7
 1 4 6 8

#+BEGIN_SRC python
  tree = (5, (3, (1, None, None), (4, None, None)), (7, (6, None, None), (8, None, None)))

  def lowest_common_ancestor(a, b, tree):
      if (min(a,b) < tree[0]) and (max(a,b) > tree[0]):
          return tree[0]
      elif b < tree[0]:
          return lowest_common_ancestor(a, b, tree[1])
      else:
          return lowest_common_ancestor(a, b, tree[2])

  return lowest_common_ancestor(6, 4, tree)
      
#+END_SRC 

#+RESULTS:
: 5

** Balance an unbalanced BST
Balance a tree, knowing that the left side is larger than the right.
       7
     5   8
   4  6
 3

#+BEGIN_SRC python
tree = [7, [5, [4, [3, [2, None, None], None], None], [6, None, None]], [8, None, None]]

def balance_once(head):
    old_head = list(head)
    head = head[1]
    old_head[1] = head[2]
    head[2] = old_head
    return head

return balance_once(tree)
#+END_SRC

#+RESULTS:
| 5 | (4 (3 (2 None None) None) None) | (7 (6 None None) (8 None None)) |

* Graph
** Six degrees of Kevin Bacon
Given a 'list' of movies and their associated cast, devise and implement a way to find the shortest path between any actor and Kevin Bacon.

*** Strategy
Actors are nodes, movies are edges between them.

Start at actor. Breadth first search of all neighbors. Maintain dictionary of visited actors and shortest paths to them. Once all actors exhausted or no more moves available, return shortest path to Kevin Bacon.

Visit a node if never visited. Update path. New path will never be shorter than old due to this being a breadth-first search.

#+BEGIN_SRC python
  from collections import deque

  class actor:
      def __init__(self, name, neighbors):
          self.name = name
          self.neighbors = neighbors
          
      def getneighbors(self):
          return self.neighbors

      def setneighbors(self, neighbors):
          self.neighbors = neighbors

      def getname(self):
          return self.name        

  w = actor('w', [])
  x = actor('x', [])
  y = actor('y', [])
  z = actor('z', [])

  w.setneighbors([z, y])
  x.setneighbors([y])
  y.setneighbors([x, z, w])
  z.setneighbors([y, w])


  def shortest_path(init, searchee):
      path_dict = {}
      Q = deque()
      Q.append(init)
      path_dict[init] = []
      while Q:
          acts_visited = [] # In case there are two edges connecting same actors
          curnode = Q.pop()
          if curnode == searchee:
              path_dict[searchee].append(searchee)
              return path_dict[searchee]
          for k in curnode.getneighbors():
              if (k not in acts_visited) and k not in path_dict:
                  Q.append(k)
                  acts_visited.append(k)
                  path_dict[k] = list(path_dict[curnode])
                  path_dict[k].append(curnode)

  return [k.getname() for k in shortest_path(x, z)]                

#+END_SRC

#+RESULTS:
| x | y | z |

** Word-neighbors
You're given two words. Find the shortest path between them, where a single move entails switching a single letter in each word (or inserting one), and each intermediary step must be a valid word. 

First step is generating the neighbors for every word. This script does that, both for the case with only letter-swapping and then with letter-insertion as well. This is then pickled, so it doesn't have to be done again and again while testing.
#+BEGIN_SRC python
  import pickle

  f = open('wordlist.txt', 'r')
  wordlist = f.readlines()
  wordlist = [x.strip("\n").lower() for x in wordlist]
  wordict = {}
  for line in wordlist:
      wordict[line] = []
  f.close()

  letters = list('abcdefghijklmnopqrstuvwxyz')
  for word in wordlist:
      for i, letter in enumerate(list(word)): # Letter replacement
          for repletter in letters:
              neword = list(word)            
              neword[i] = repletter
              temp = "".join(neword)
              if temp in wordict and temp not in wordict[word]:
                  wordict[word].append(temp)
  pikl_file = open('replacement_wordict.pkl', 'wb') 
  pickle.dump(wordict, pikl_file)
  pikl_file.close()

  for word in wordlist:                
      for i in range(len(word)+1): # letter insertion
          for repletter in letters:
              neword = list(word)            
              neword.insert(i, repletter)
              temp = "".join(neword)
              if temp in wordict and temp not in wordict[word]:
                  wordict[word].append(temp)

  pikl_file = open('replacement_and_insertion_wordict.pkl', 'wb') 
  pickle.dump(wordict, pikl_file)
  pikl_file.close()                
#+END_SRC

#+RESULTS:
: None


This code implements a simple algorithm, which travels in a single direction between two words. It's inefficient, as looking searching for a match from two directions will search exponentially fewer words.
#+BEGIN_SRC python
  from collections import deque
  import pickle

  f = open('wordlist.txt', 'r')                      
  wordlist = f.readlines()                           
  wordlist = [x.strip("\n").lower() for x in wordlist]
  f.close()

  pikl_file = open('replacement_and_insertion_wordict.pkl', 'rb')
  wordict = pickle.load(pikl_file)
  pikl_file.close()
      
  def findpath(word1, word2):
      stack = deque()
      stack.append(word1)
      visitedWords = {word1:1}
      while 1:
          if stack:
              curnode = stack.popleft()
          else:
              return None
          for k in wordict[curnode]:
              if (k == word2):
                  m = visitedWords[curnode]
                  theanswer = [k, curnode]
                  while m != 1:
                      theanswer.append(m)
                      m = visitedWords[m]                    
                  return theanswer
              if k not in visitedWords:
                  visitedWords[k] = curnode
                  stack.append(k)

  return findpath('a', 'bent')

#+END_SRC

#+RESULTS:
| bent | ben | be | b | a |

This script does a similar thing, but instead of working with two words, it works for n words. And it's faster, because it approaches from all sides! Basically, it's looking for the shortest paths to connect all the given words.

#+BEGIN_SRC python
#!/usr/bin/env python
from collections import deque
import pickle

f = open('wordlist.txt', 'r')                      
wordlist = f.readlines()                           
wordlist = [x.strip("\n").lower() for x in wordlist]
f.close()

pikl_file = open('replacement_and_insertion_wordict.pkl', 'rb')
wordict = pickle.load(pikl_file)
pikl_file.close()

def findpath_multiple(input_list):
    visitedwords = [{word: None} for word in input_list]
    paths = [[] for word in input_list]
    deques = [deque() for word in input_list]
    curword = [1 for word in input_list]
    for k in range(len(deques)):
        deques[k].append(input_list[k])

    while 1:
        for commonword in visitedwords[0]:
            if all([commonword in visitedwords[x] for x in range(0, len(input_list))]):
                for i, word in enumerate(input_list):
                    m = commonword
                    while m != None:
                        paths[i].append(m)
                        m = visitedwords[i][m]
                return(commonword, paths)
        for i, word in enumerate(input_list):
            if deques[i]:
                curword[i] = deques[i].popleft()
            else:
                return None
            for neighbor in wordict[curword[i]]:
                if neighbor not in visitedwords[i]:
                    visitedwords[i][neighbor] = curword[i]
                    deques[i].append(neighbor)
        
return(findpath_multiple(['bath', 'kent', 'what']))
#+END_SRC

#+RESULTS:
| cast | ((cast cash bash bath) (cast cant cent kent) (cast cost coat chat what)) |

